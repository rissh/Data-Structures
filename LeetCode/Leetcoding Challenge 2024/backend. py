@main.command()
@click.argument("spec", type=click.Path(exists=True, dir_okay=False, path_type=Path))
@click.option(
    "--backend",
    type=click.Choice([b.name for b in Backend]),
    default=Backend.direct.name,
    help="Choose the environment to run the validation (docker, podman, or direct).",
)
def validate_spec(
    spec: Path,
    backend: str,
) -> None:
    """
    Validate the given OpenAPI specification file.

    This command checks the provided OpenAPI specification for any errors or issues.
    The validation can be performed directly on the host machine or within a container
    using Docker or Podman, depending on the specified backend.
    """
    # Ensure backend is a Backend enum instance
    chosen_backend = getattr(Backend, backend)

    # Validate the specification using the specified backend
    validate_openapi_spec(spec=spec, backend=chosen_backend)


def validate_openapi_spec(spec: Path, backend: Backend) -> None:
    # Example implementation of how you might validate the spec
    if backend == Backend.direct:
        # Direct validation on the host
        run_direct_validation(spec)
    else:
        # Validation inside a Docker or Podman container
        run_containerized_validation(spec, backend)


def run_direct_validation(spec: Path) -> None:
    # Direct validation logic
    print(f"Validating {spec} directly on the host machine...")
    # Logic for direct validation


def run_containerized_validation(spec: Path, backend: Backend) -> None:
    # Containerized validation logic
    print(f"Validating {spec} using {backend} container...")
    # Logic to run validation in docker or podman container
